<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>平衡树总结</title>
    <url>/2019/11/24/%E5%B9%B3%E8%A1%A1%E6%A0%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[ORDER]关于休整信息学奥赛学习进程的命令</title>
    <url>/2019/11/16/ORDER-ExceptionSolution/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter the password to read the post.">
    <label for="pass">Enter the password to read the post.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情控制做题记</title>
    <url>/2019/11/09/PN-YiQingKongZhi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><blockquote><p>题目来源:<a href="https://www.luogu.org/problem/P1084" target="_blank" rel="noopener"><i class="fa fa-send-o"></i>洛谷</a></p></blockquote><p>大意:有带权树一,令自根至每叶子路上至少驻军一(可在叶子之上而不可在根),初始有些节点上有军队,求所有军队移动距离最大值的最小值</p><a id="more"></a><p>等会儿,”最大值的最小值”?,看上去像二分答案(看来总结大意还是很重要的)</p><p><del>余思良久,但以为DP,总结大意乃知二分答案.故知总结大意之要也</del></p><p>细节:$w&lt;1e9$,则开long long</p><p>以$l=0,r=最长链(或以路径总和代之) $为边界,枚举移动距离之上界,贪心判断,原则如下:</p><p>dfs根的每一个儿子之原则有:</p><ul><li>一个军队,能向上调就调(只要不超上界),因为越向上,能覆盖的叶子节点一般会增多(也有可能不变),永远不要向下调兵,因此其调兵过程中任一一个子树不会出现其他子树的军队</li></ul><p>dfs完根的每一个儿子,如果有$u$的子树未完全覆盖,那对于这颗子树,它之前自己的规划就完全不要了;而把其他的子树有多出来的剩余里程数$&gt;0$的军队,看看够不够经过根节点跑到$u$的;如果够,就调到$u$去.</p><p>于是模拟过程分:</p><p>1.$O(N)$预处理出每个节点到根的距离</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dfs1(u,road)&#123;</span><br><span class="line">    dis[u]=road;</span><br><span class="line">    <span class="keyword">for</span>(v in son[u])</span><br><span class="line">	&#123;</span><br><span class="line">		dfs1(v,road+E(u,v))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便预处理出每个军队</p><p>2.dfs根的每一个儿子$u$</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dfs2(u)&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=arrmy[u]?mid:<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(v in son[u])</span><br><span class="line">	&#123;</span><br><span class="line">		ans=max(ans,dfs2(v)-E(u,v));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.如果$dfs(u)&lt;0$,则其子树未完全覆盖,把其他多出来的军队调过去,然后</p><p><strong><font color="purple">Runtime Error:栈溢出[&gt;1 Byte],此思维进程IS KILLED</font></strong></p><hr><p><strong><font color="red">正在查找其他可行解<del>(查看题解)</del>…</font></strong></p><ol><li>O(N)倍增预处理出祖先和距离</li><li>O(M)的每个军队向上往死里跳</li><li>O(N)审查无法自保的子树</li><li>每一个能自保的根之子,留一个里程最小的军队,其他军队开赴根节点</li><li>根节点统一调控,以贪心法把军队驻扎在无法自保的根之子去</li></ol><!-- rebuild by neat -->]]></content>
      <categories>
        <category>做题记</category>
      </categories>
  </entry>
  <entry>
    <title>日志汇总</title>
    <url>/2019/11/02/CC-Main-File/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter the password to read the post.">
    <label for="pass">Enter the password to read the post.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>4294967280</tag>
      </tags>
  </entry>
  <entry>
    <title>(未完)[NOIP2018]换教室做题笔记</title>
    <url>/2019/10/28/PN-NOIP2016-Classroom/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>由题面”最短路”和”$v\leq300$”可知,需要Floyd处理</p><p>对第$i$节课来说,有如下情况</p><p><img src="/images/loading.png" data-original="情况.jpg" alt="情况"></p><p><strong>其中方括号表示取两种情况的最小值(需要提前确定选不选,不存在概率问题)</strong></p><p><strong>尖括号表示两种情况成以相应概率后相加(未发生的,未确定的事件,概率之和为1)</strong></p><p>我们可以把红圈里的分支继续完善,such as</p><p><img src="/images/loading.png" data-original="情况2.jpg" alt="情况2"></p><p>注意把”被遗弃”的两个$cost$再分别乘以它们的概率</p><p>于是有$f[i][j][state]$表示前$i$节课,换了$j$节,第$i$节换不换(即$state$)是的最小期望</p><p><del>假装我说明白了吧</del></p><h1 id="修正模型2"><a href="#修正模型2" class="headerlink" title="修正模型2"></a>修正模型2</h1><!-- rebuild by neat -->]]></content>
      <categories>
        <category>做题笔记</category>
        <category>NOIP2016</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>(未完)[NOIP2018]保卫王国做题笔记</title>
    <url>/2019/10/27/PN-NOIP2018-KingdomProtection/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>树上DP,设$dp[i][state(state=0或1)]$是$i$结点时为$state$时,以$i$为根的子树最少花费,则有</p><script type="math/tex;mode=display">dp[u][0]=\sum_{E(u,v)}dp[v][1]\\
dp[u][1]=\sum_{E(u,b)}\min(dp[v][0],dp[v][1])</script><p>对于每一组询问($i$必须为$a$,$j$必须为$b$),使$dp[i][!a]=dp[j][!b]=INF$即可</p><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>发现每次询问,都只有从$Root$分别到$i$和$j$的两条链上的结点$dp$值有变动,即从$Root$到$LCA(i,j)$,$LCA(i,j)$分别到$i$和$j$三条链上有变动,于是不需大量修改</p><blockquote><p>倍增法</p></blockquote><p>提前倍增预处理出$f[i][k][a][b]$表示$i$结点为$a$,$i$的第$2^k$个祖先为$b$时,除去$i$的子树及$i$,以$i$的第$2^k$个祖先为根的最小花费</p><script type="math/tex;mode=display">fa是i的父节点\\
f[i][0][1][0]=dp[fa][0]-dp[i][1]\\
f[i][0][1][1]=f[i][0][0][1]=f[i][dp[fa][1]-\min(dp[i][0],dp[i][1])\\</script><script type="math/tex;mode=display">fa(i,k)表示i的第k个祖先\\
f[i][k][a][b]=\min(f[i][k-1][a][0]+f[fa(i,k-1)][0][b],\\f[i][k-1][a][1]+f[fa(i,k-1)][1][b])</script><p>然后按LCA的模式处理询问即可</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>做题笔记</category>
        <category>NOIP2018</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title>The Renovation of The Blog</title>
    <url>/2019/10/27/About-The-Renovation-of-Blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><p>此博客已翻新完毕于2019.10.27,旧文档尚未就位,博客优化进程终止</p><a id="more"></a><hr><p>为防止博客优化进程消耗精力,影响学习主进程及第三轮攻势,于2019.10.26至2020.7.1之间全面终止博客优化进程并禁止重启</p><blockquote><p>中央委员会批示</p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>BLOG</tag>
      </tags>
  </entry>
  <entry>
    <title>[题目学习笔记]SSOIER1726_矩阵</title>
    <url>/2019/08/18/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-SSOIER1726-%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>设第$i$行总共统一加了$Add1[i]$,第$j$列总共统一加了$Add2[j]$</p><p>则对于格子$[i][j]$,其值为$Add1[i]+Add2[j]$</p><p>于是对于每一组限制$(x,y,c)$,有$Add1[x]+Add2[y]=c$</p><p>差分约束的关系式是$x-y\leq or\geq c$怎么办,那么<strong>强行</strong>设$FAdd2[y]=-Add2[y]</p><p>于是对于每一组限制$(x,y,c)$,有$Add1[x]-FAdd2[y]=c$$</p><p>即$Add1[x]-FAdd2[y]\geq c\\FAdd2[y]-Add1[x]\geq -c$</p><p>DFS_SPFA判环即可</p><h1 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h1><p>又忘了$InStack[i]=0$QwQ<br>清空图时又忘了$SCount=0$QwQ<br></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e3</span>+<span class="number">10</span>,MAXM=<span class="number">4e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM],STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],InStack[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(InStack[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	InStack[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=SDis[i]+Dis[x];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	InStack[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">memset</span>(SHd,<span class="number">0</span>,<span class="keyword">sizeof</span>(SHd));</span><br><span class="line">	<span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">	<span class="built_in">memset</span>(InStack,<span class="number">0</span>,<span class="keyword">sizeof</span>(InStack));</span><br><span class="line">	SCount=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;M,&amp;K) ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line">		AddEdge(y+N,x,c);</span><br><span class="line">		AddEdge(x,y+N,-c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N+M;i++)<span class="keyword">if</span>(!Vis[i])</span><br><span class="line">	&#123;</span><br><span class="line">		Dis[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)_main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]账本核算</title>
    <url>/2019/08/17/%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%B4%A6%E6%9C%AC%E6%A0%B8%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>差分约束</p><p>设前$i$月总收入为$S[i]$</p><p>则对于每一组($x,y,w$),有$S[y]-S[x-1]=w$</p><p>即关系式为</p><script type="math/tex;mode=display">\color{red}S[y]-S[x-1]\geq w\\
S[y]-S[x-1]\leq w,即\color{red}s[x-1]-s[y]\geq -w</script><p>然而诡异的时说好的$N,M\leq100$然而却RE(IN SSOIER.com)</p><p>随手开到$1e3$而AC</p><p><del>当然也有可能是我太弱了</del></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000</span>+<span class="number">10</span>,MAXM=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM],STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> InStack[MAXN],Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(InStack[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	InStack[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i!=<span class="number">-1</span>;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;(ll)Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=(ll)Dis[x]+SDis[i];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	InStack[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(SHd,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SHd));</span><br><span class="line">		SCount=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">		<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">		<span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">		<span class="built_in">memset</span>(InStack,<span class="number">0</span>,<span class="keyword">sizeof</span>(InStack));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> X,Y,W;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;X,&amp;Y,&amp;W);</span><br><span class="line">			AddEdge(X<span class="number">-1</span>,Y,W),AddEdge(Y,X<span class="number">-1</span>,-W);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!InStack[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"false"</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"true"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)Work();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]小k的农场</title>
    <url>/2019/08/17/%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B0%8Fk%E7%9A%84%E5%86%9C%E5%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><p>差分约束判环<br>设$D[i]$表示第$i$个的农作物数量,则关系式</p><script type="math/tex;mode=display">D[a]-D[b]\geq c\\
D[a]-D[b]\leq c,即D[b]-D[a]\geq -c\\
D[a]-D[b]=0,即D[a]-D[b]\geq 0\&\&D[b]-D[a]\geq 0</script><p>然BFS_SPFA炸了,于是DFS_SPFA<br></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>,MAXM=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM*<span class="number">2</span>],SDis[MAXM*<span class="number">2</span>],STo[MAXM*<span class="number">2</span>],SCount;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	SDis[SCount]=dis,STo[SCount]=to;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	VisCount[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(Vis[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=Dis[x]+SDis[i];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Vis[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS_SPFA</span><span class="params">(<span class="keyword">int</span> Start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">	Q.push(Start);</span><br><span class="line">	Dis[Start]=<span class="number">0</span>;Vis[Start]=VisCount[Start]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=STo[i];</span><br><span class="line">			<span class="keyword">if</span>(Dis[v]&lt;Dis[u]+SDis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[v]=Dis[u]+SDis[i];</span><br><span class="line">				<span class="keyword">if</span>(Vis[v])<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(++VisCount[v]&gt;N+<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				Q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> order,a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;order,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">				AddEdge(b,a,c);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">				AddEdge(a,b,-c);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">				AddEdge(a,b,<span class="number">0</span>),AddEdge(b,a,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0Xc0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]LOJ10090_布局</title>
    <url>/2019/08/17/%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-LOJ10090-%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><p>差分约束<br>条件:($P[i]$为第$i$头奶牛位置)</p><script type="math/tex;mode=display">P[B]-P[A]\leq D\\
P[A]-P[B]\leq -D\\
P[i-1]-P[i]\leq 0\\</script><p>求最短路即可,若SPFA(1)时访问不到N,则输出-2;若负环则输出-1.<br><del>SPFA忘了Vis[u]=0这一句,结果调试了2个小时QwQ,于是乎又双叒叕证明了信息学学习准则草案的无比正确性</del><br></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,ML,MD;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e3</span>+<span class="number">10</span>,MAXM=<span class="number">3e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM] ,STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	SDis[SCount]=dis,STo[SCount]=to;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">	Q.push(start);</span><br><span class="line">	Dis[start]=<span class="number">0</span>,Vis[start]=VisCount[start]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=STo[i];</span><br><span class="line">			<span class="keyword">if</span>(Dis[v]&gt;SDis[i]+Dis[u])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[v]=SDis[i]+Dis[u];</span><br><span class="line">				<span class="keyword">if</span>(Vis[v])<span class="keyword">continue</span>;</span><br><span class="line">				VisCount[v]++;</span><br><span class="line">				<span class="keyword">if</span>(VisCount[v]&gt;N+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				Q.push(v),Vis[v]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ABS</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;ML,&amp;MD);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ML;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> A,B,D;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;D);</span><br><span class="line">		AddEdge(A,B,D);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MD;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> A,B,D;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;D);</span><br><span class="line">		AddEdge(B,A,-D);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)AddEdge(i,i<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">bool</span> Flag;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">if</span>(!SPFA(<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		Flag=VisCount[N]&gt;<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(i))&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Flag)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dis[N]-Dis[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-2"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]LOJ10089_糖果</title>
    <url>/2019/08/17/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-LOJ10089-%E7%B3%96%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><h1 id="模型构造"><a href="#模型构造" class="headerlink" title="模型构造"></a>模型构造</h1><p>差分约束</p><p>设$Dis[i]$为编号为$i$的小朋友的获得糖果数</p><p>则</p><script type="math/tex;mode=display">X=1:\ D[A]-D[B]\geq 0,D[B]-D[A] \geq 0\\
X=2:\ D[A]-D[B]\geq 1\\
X=3:\ D[A]-D[B] \geq 0\\
X=4:\ D[A]-D[B]\geq1\\
X=5:\ D[B]-D[A]\geq 0</script><p>有正环则无解</p><p>由于图不一定联通,每次以一个未访问结点$start$为起点SPFA</p><p>因为每个小朋友至少要有1颗糖,$Dis[start]=1$</p><h1 id="模型修正1"><a href="#模型修正1" class="headerlink" title="模型修正1"></a>模型修正1</h1><p>答案可能超过int_MAX,开long long</p><h1 id="模型修正2"><a href="#模型修正2" class="headerlink" title="模型修正2"></a>模型修正2</h1><p>加入特判,当$(X==2 ||X==3)\&amp;\&amp;(A==B)$时非法</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>,MAXK=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXK*<span class="number">2</span>],STo[MAXK*<span class="number">2</span>],SDis[MAXK*<span class="number">2</span>],SCount;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> Start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	Dis[Start]=<span class="number">1</span>;Vis[Start]=VisCount[Start]=<span class="number">1</span>;</span><br><span class="line">	Q.push(Start);</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(Dis[STo[i]]&lt;(ll)SDis[i]+Dis[u])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[STo[i]]=(ll)SDis[i]+Dis[u];</span><br><span class="line">				<span class="keyword">if</span>(Vis[STo[i]])<span class="keyword">continue</span>;</span><br><span class="line">				VisCount[STo[i]]++;</span><br><span class="line">				<span class="keyword">if</span>(VisCount[STo[i]]&gt;N+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				Q.push(STo[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> X,A,B;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;X,&amp;A,&amp;B);</span><br><span class="line">		<span class="keyword">switch</span>(X)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">				AddEdge(B,A,<span class="number">0</span>),AddEdge(A,B,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">				<span class="keyword">if</span>(A==B)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">"-1"</span>) ;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				AddEdge(A,B,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">				AddEdge(B,A,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">				<span class="keyword">if</span>(A==B)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">"-1"</span>) ;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				AddEdge(B,A,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">				AddEdge(A,B,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll Ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Ans+=Dis[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]LOJ10088_收纳员问题</title>
    <url>/2019/08/17/%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-LOJ10088-%E6%94%B6%E7%BA%B3%E5%91%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><p><del>本文思路依旧照搬一本通</del></p><p>差分约束</p><p>设$num[i]$为$i$时刻申请开始工作的人数,$x[i]$为$i$时刻实际开始工作的人数则$x[i]\leq num[i]$,$r[i]$表示$i$时刻需要有多少人工作</p><p>设</p><script type="math/tex;mode=display">s[i]=\sum_{j=1}^ix[i]</script><p>则$i$时刻工作的总人数为$s[i]-s[i-8]$</p><p>故知</p><script type="math/tex;mode=display">s[i]-s[i-8]\geq r[i](i\in[8,23])\\
Especially,s[23]+s[i]-s[i+16]\geq r[i](i\in [0,7])\\
0\leq s[i]-s[i-1]\leq num[i](i\in [1,23])\\
\color{green}{Especially,0\leq s[0]-s[23]\leq num[0]}\\</script><p>则</p><script type="math/tex;mode=display">s[i]-s[i-8]\geq r[i](i\in[8,23])\\
\color{red}{s[i]-s[i+16]\geq r[i]-s[23](i\in [0,7])}\\
s[i]-s[i-1]\geq 0(i\in[0,23])\\
s[i-1]-s[i]\geq -num[i](i\in[0,23])\\
\color{green}{s[0]-s[23]\geq 0\\
s[23]-s[0]\geq -num[0]\\}</script><p><strong>20190817更正</strong></p><p><strong>绿色关系式是错误的,不应加入差分系统(因为$S[0]\not\geq S[23]$)</strong></p><p>红色关系式中,有三个未知量,则枚举$s[23]$可能的值,可行时输出最小值即可</p><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>[题目学习笔记]LOJ10087_Intervals</title>
    <url>/2019/08/16/LOJ10087-Intervals/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><p>差分约束,其约束条件:<br>$S[b]-S[a-1]\geq c$</p><p>$S[i]-S[i-1]\geq 0$</p><p>$S[i]-S[i-1]\leq 1,即S[i-1]-S[i]\geq -1$</p><p>代码如下<br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[(<span class="keyword">int</span>)<span class="number">5e4</span>+<span class="number">10</span>],SNxt[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],STo[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],SDis[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SNxt[++SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> Minn,Maxx;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line"><span class="keyword">int</span> Dis[MAXN],Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.push(x);</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	Dis[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i!=<span class="number">-1</span>;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(Dis[u]+SDis[i]&gt;Dis[STo[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[STo[i]]=Dis[u]+SDis[i];</span><br><span class="line">				<span class="keyword">if</span>(!Vis[STo[i]])</span><br><span class="line">				&#123;</span><br><span class="line">					Vis[STo[i]]=<span class="number">1</span>;</span><br><span class="line">					Q.push(STo[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memset</span>(SHd,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SHd)) ;</span><br><span class="line">	<span class="built_in">memset</span>(SNxt,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SNxt));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123; </span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		AddEdge(a,b+<span class="number">1</span>,c);</span><br><span class="line">		Minn=<span class="built_in">std</span>::min(Minn,a),Maxx=<span class="built_in">std</span>::max(Maxx,b+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=Minn;i&lt;=Maxx;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		AddEdge(i,i+<span class="number">1</span>,<span class="number">0</span>),AddEdge(i+<span class="number">1</span>,i,<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	SPFA(Minn);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dis[Maxx]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>题目学习笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>一本通</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串算法</title>
    <url>/2019/08/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:24 GMT+0800 (GMT+08:00) --><p>字符串Hash</p><p>字符串Hash就是将一个字符串转换成b进制数,这样比较字符串就和比较数字一样方便了<br>(如可以知道”ABC”==”ABC”,”BC”是”ABCD”的一部分)<br>为防止溢出,通常将$Hash mod h(b&lt;h\&amp;\&amp;\gcd(b,h)=1)$<br>则$H(String,k)=(H(String,k-1)*b+String[k]) mod h$</p><h1 id="Hash表-演示插入377的过程"><a href="#Hash表-演示插入377的过程" class="headerlink" title="Hash表(演示插入377的过程)"></a>Hash表(演示插入377的过程)</h1><p><img src="/images/loading.png" data-original="0.png" alt><br><img src="/images/loading.png" data-original="1.png" alt><br><img src="/images/loading.png" data-original="2.png" alt></p><h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习</category>
        <category>字符串算法</category>
      </categories>
      <tags>
        <tag>字符串算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1273有线电视网之题解</title>
    <url>/2019/08/03/P1273%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E4%B9%8B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><p>原题地址[<a href="https://www.luogu.org/problem/P1273" target="_blank" rel="noopener">https://www.luogu.org/problem/P1273</a>].</p><p>本题看上去像是普通的树上背包，然而不同的是除了考虑的范围，费用还出现了收入，于是我们对不和谐的地方进行”整编”.</p><h4 id="模拟部分"><a href="#模拟部分" class="headerlink" title="模拟部分"></a>模拟部分</h4><p>有一些用户所支付的费用，大于公司修路所用的费用，则公司盈利；然而有一些用户支付的费用不足以用来修路，就需要公司挪用一部分盈利额来补贴。我们可以把问题转化为，用盈利额，最多能帮助多少修不起路的用户看上电视。</p><p>这个问题的关键是盈利额是固定的（不可能存在你给修得起路的用户修路你还亏钱的情况，只能是既得到了盈利额，路又修好了）它可以递归算出:</p><p>首先,我们假设用户都是预付款。用户把钱交给上一级转播站（父节点）。转播站花钱把路修好。剩下的钱都累积到转播站的私有财产了。这一级别的转播站在把钱交给上一级的转播站（父节点）。上一级的转播站把路修好剩下的钱又累积进私有财产……直到我交的钱不够修路了，就把钱留在自己手里，等待上面的补贴.就这样,盈利逐级收归中央,而有一些资产在传递的过程中出现残留.</p><p>这个过程的伪代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> TMoney[MAXN];<span class="comment">//TMoney[x]代表x的资产</span></span><br><span class="line">Dfs(x)</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">		TMoney[x]=Value[x];<span class="comment">//Value为用户支付金额</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span>(every E(x,v))</span><br><span class="line">		Dfs(v);</span><br><span class="line">		<span class="keyword">if</span>(TMoney[v]&gt;=E(x,v))</span><br><span class="line">			TMoney[x]+=TMoney[v]-E(x,v);</span><br></pre></td></tr></table></figure><h4 id="动规部分"><a href="#动规部分" class="headerlink" title="动规部分"></a>动规部分</h4><p>求出盈利额后，我们把修得起路的用户从动态规划的范围内彻底排除，然后就可以进行树上背包了.</p><p>设$f[x][s]$是以x结点为根的子树接受上级s元的补贴,最多能帮助多少修不起路的用户看上电视,</p><p>则$f[x][s]=\max\{f[v][j-E(x,v)]+f[x][s-j]\}(v\in son[i])$,这里的$E(i,v)$表示修好$(i,v)$这条边还需要补贴多少.</p><p>这个过程的伪代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Dp(x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(到了修不起路的叶子)</span><br><span class="line">        f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(every E(x,v))</span><br><span class="line">	&#123;</span><br><span class="line">		Dp(v);</span><br><span class="line">		<span class="keyword">for</span>(非负整数s)<span class="comment">//范围见后文</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=s;j&gt;=E(x,v);j--)</span><br><span class="line">			&#123;</span><br><span class="line">				f[x][s]=<span class="built_in">std</span>::max(f[x][s],f[x][s-j]+f[v][j-E(x,v)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便，我们在前面模拟时:如果我的资产够修路，那$上一级的资产总额+=我的资产-E(i,v),E(i,v)=0$,如果不够,就把我的资产全部用来投入修路,即$E(i,v)-=我的资产,我的资产=0$</p><p>还有一些问题:伪代码中s的范围应该是多少?显然不会超过总盈利额，即根节点的资产(其他节点的资产修路的时候都花光了).并且，如果$CS[i]$元能修好整个子树的路，那么大于$CS[i]$的补贴也毫无意义.</p><p>于是,$0\leq s\leq \min(z,TMoney[1])$</p><p>最后统计答案时,不要忘了加上修得起路的用户数</p><p>所以在前面模拟的部分，我们还需要递归求出这些值</p><p>代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN =<span class="number">3e3</span>+<span class="number">10</span>,MAXM=<span class="number">3e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> StarHd[MAXN],StarNxt[MAXN],StarTo[MAXN],StarDis[MAXN],StarCount;</span><br><span class="line"><span class="keyword">int</span> Value[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> Amazing;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)\</span></span><br><span class="line">&#123;\</span><br><span class="line">	<span class="built_in">printf</span>(#x);\</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"=%d\n"</span>,x);\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	StarCount++;</span><br><span class="line">	StarNxt[StarCount]=StarHd[from];</span><br><span class="line">	StarTo[StarCount]=to;</span><br><span class="line">	StarDis[StarCount]=dis;</span><br><span class="line">	StarHd[from]=StarCount; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N-M;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="keyword">while</span>(k--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a,b;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">			AddEdge(i,a,b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N-M+<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,Value+i);</span><br><span class="line">		Amazing+=Value[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> TMoney[MAXN],TSum[MAXN],TFlag[MAXN];<span class="comment">//T=Treasure</span></span><br><span class="line"><span class="keyword">int</span> CS[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">	&#123;</span><br><span class="line">		TMoney[x]=Value[x];</span><br><span class="line">		TSum[x]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//CS[x]=0;Value[x];</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=StarHd[x];i;i=StarNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=StarTo[i];</span><br><span class="line">		Dfs(v);</span><br><span class="line">		CS[x]+=StarDis[i]+CS[v];</span><br><span class="line">		<span class="keyword">if</span>(TMoney[v]&gt;=StarDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			TMoney[x]+=TMoney[v]-StarDis[i];</span><br><span class="line">			TSum[x]+=TSum[v];</span><br><span class="line">			TFlag[v]=<span class="number">1</span>;</span><br><span class="line">			StarDis[i] =<span class="number">0</span>;</span><br><span class="line">			TMoney[v]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;StarDis[i]-=TMoney[v];TMoney[v]=<span class="number">0</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CS[x]-=(!TFlag[x])?TSum[x]:<span class="number">0</span>;</span><br><span class="line">	CS[x]=<span class="built_in">std</span>::min(CS[x],TMoney[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">	&#123;</span><br><span class="line">		f[x][<span class="number">0</span>]=!TFlag[x];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> s=TMoney[<span class="number">1</span>];s&gt;=<span class="number">0</span>;s--)f[x][s]+=(!TFlag[x])?TSum[x]:<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=StarHd[x];i;i=StarNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=StarTo[i];</span><br><span class="line">		Dp(v);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> s=CS[x];s&gt;=<span class="number">0</span>;s--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=s;j&gt;=StarDis[i];j--)</span><br><span class="line">			&#123;</span><br><span class="line">				f[x][s]=<span class="built_in">std</span>::max(f[x][s],f[x][s-j]+f[v][j-StarDis[i]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Read();</span><br><span class="line">	Dfs(<span class="number">1</span>);</span><br><span class="line">	Dp(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=TMoney[<span class="number">1</span>];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Ans=<span class="built_in">std</span>::max(Ans,f[<span class="number">1</span>][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>题目练习</category>
        <category>简单动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>二分之边界</title>
    <url>/2019/08/03/%E4%BA%8C%E5%88%86%E4%B9%8B%E8%BE%B9%E7%95%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Dec 14 2019 08:41:25 GMT+0800 (GMT+08:00) --><h2 id="整数区间二分"><a href="#整数区间二分" class="headerlink" title="整数区间二分"></a>整数区间二分</h2><h3 id="l-r当前均可行并记录答案时"><a href="#l-r当前均可行并记录答案时" class="headerlink" title="l,r当前均可行并记录答案时"></a>l,r当前均可行并记录答案时</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">	int mid=(l+r)/2;</span><br><span class="line">	if(Check(mid))</span><br><span class="line">	&#123;</span><br><span class="line">		Ans=mid;</span><br><span class="line">		l=mid+1;//当min可行,防止死循环重复在mid一点,二分区间将mid排除</span><br><span class="line">	&#125;</span><br><span class="line">	else r=mid-1;//当mid不可行时,维护l,r当前均可行,二分区间将mid排除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="l-r当前均可行并不记录答案时"><a href="#l-r当前均可行并不记录答案时" class="headerlink" title="l,r当前均可行并不记录答案时"></a>l,r当前均可行并不记录答案时</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">	int mid=(l+r)/2;</span><br><span class="line">	if(Check(mid))</span><br><span class="line">	&#123;</span><br><span class="line">		Ans=mid;</span><br><span class="line">		l=mid;//当min可行,为保存答案到最后,二分区间将mid排除</span><br><span class="line">	&#125;</span><br><span class="line">	else r=mid-1;//当mid不可行时,维护l,r当前均可行,二分区间将mid排除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实数区间二分"><a href="#实数区间二分" class="headerlink" title="实数区间二分"></a>实数区间二分</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(r-l&gt;DLT)//DLT为精度(如0.01)</span><br><span class="line">&#123;</span><br><span class="line">	double mid=(l+r)/2.0;</span><br><span class="line">	if(Check(mid))</span><br><span class="line">	&#123;</span><br><span class="line">		Ans=mid;</span><br><span class="line">		l=mid;</span><br><span class="line">	&#125;</span><br><span class="line">	else r=mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.sohu.com/a/243437962_100201031" target="_blank" rel="noopener">其实此文章写的甚是详细</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
</search>
