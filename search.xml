<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>「LCT」之总结</title>
    <url>/posts/About-LCT/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX19qirU+08GeFmUM/sOBZprwPpH8mpE/Gyh05tQjxHjKIKvl9kml/1hzR3zAFB6O5rL9jXW3lBYJbR6Grqt7zJlZcBkGNDjH5Z83dWvj33D5joCvzaHjQdsfCM0o8rWT+RPHritNRcYZKSxrRCUJORsprhtHcq3dJMDsJauVsnThxpW2m8YmbxHSxLSXQ3q7XM0MsYCjz+yKGxpNGRF4VQ9Cx33hGcC5gqO6POWDTVkGbUPys0YenwDaTrFpLRHzS9THRUb/5ac5ahIouQROGw7xSrBdms1ClCp8rR6nYeWmow2VzrXXJGwuifvczrxiC4anUuWxW7toX2l1gt49r2SO/k8Md6zCYYsh/3iyQf633xyL36Es8TjMUGTJ/q5XMii6A+sPNvzRYXdgX32oaXFfgMRcQ0ohPGvAhscWzLDuhf2gGsOujOW7EF51656oI4VL4Y8aJ9yjqYy/71DLZF3J0k9JUV2WM2ekl03l+SSHNjaWBPe/Dv8N5XatYbMB6hYIdaA3NeJuqw==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>LCT</category>
      </categories>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>「OI之数学」之总结</title>
    <url>/posts/About-Math/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX186AjXWUTfy0SMrirbGVXUG3cpAnHbwPTE=
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>「网络流」之总结</title>
    <url>/posts/About-Network-Flows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX19NaeusUxyHN5NLWC9I/4b31x/XYbYUnPUsKMZqr9zmgrEW1+LnVDEJTpgBu6VYuNxWsfwJIDr3ViGcTdc3jiDKI7gsDkbY6Sw71cl/2+kftI96ONBcdy0uAjx1Miz04gVc6e3LawHR//T0SzjRjHuqRTi12LsZMxVO5AGXtmQdLy/NkC9D0/O5i73HngBLdjTWTP8XW9DMeyFEnQegPS5Li/llCEmGRCnnkBJRYUOh+qSScUaA/F6UkkofOYL3tcjqbAJ24o4ov/ReDGncRSGLG1SdvLN3umTHjgT7LRi6IVIgEjcNGp2yLzmwLjfYSNiYrj/eRWohfKkqCbn0gLH3IlUFxNx4yKxQbzoF0lyXUHzGY7I1n4gnlexWpNUdXEtqRkhDoo0uPwx0G/rH8GSg7FxT25QvV0UhAmXYloiiDC/m6f9oRA0wuiVx+iyC69Z1xYlMmvyfY27aOX01f1WWlWUO3uSLLiZMSb8TH1l6bsVZHxoaqY0pf49Av8pMjPnB8eJgVL/5BA==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>网络流</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>「奇怪DP」之总结</title>
    <url>/posts/About-Stange-DP/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+YSO40x9jIp33K2Fiwcyc7IvWiskRT008=
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]P4172水管局长</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%B0%B4%E7%AE%A1%E5%B1%80%E9%95%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>LCT相关训练</category>
      </categories>
      <tags>
        <tag>LCT</tag>
        <tag>Kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title>“跬步,以至千里”</title>
    <url>/posts/New-Year-2020/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>
    <div id="aplayer-zpixTxyF" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1427930" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>
<p>这是本文章的结尾.</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>我的收藏夹</title>
    <url>/posts/My-Favorite/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>注: 为保护下述网址的知识产权,此处仅提供URL</p>
<p>又: $\%\%\%dalaos$</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>URL</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.cnblogs.com/flashhu/p/8324551.html" target="_blank" rel="noopener">https://www.cnblogs.com/flashhu/p/8324551.html</a></td>
<td>1.LCT概念</td>
</tr>
<tr>
<td><a href="https://www.cnblogs.com/flashhu/p/9498517.html" target="_blank" rel="noopener">https://www.cnblogs.com/flashhu/p/9498517.html</a></td>
<td>2.LCT应用</td>
</tr>
<tr>
<td><a href="https://www.luogu.com.cn/blog/command-block/fft-xue-xi-bi-ji" target="_blank" rel="noopener">https://www.luogu.com.cn/blog/command-block/fft-xue-xi-bi-ji</a></td>
<td>3.FFT极详讲解</td>
</tr>
<tr>
<td><a href="https://oi-wiki.org/math/poly/fft/" target="_blank" rel="noopener">https://oi-wiki.org/math/poly/fft/</a></td>
<td>4.FFT讲解2</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>工具与资源</category>
      </categories>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]疫情控制</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-YiQingKongZhi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>动态规划</category>
        <category>树上DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树上DP</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]NOIP2018保卫王国</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-KingdomProtection/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="弗输入密码,不得视邪" />
    <label for="pass">弗输入密码,不得视邪</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>做题笔记</category>
        <category>NOIP2018</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>倍增</tag>
        <tag>NOIP</tag>
      </tags>
  </entry>
  <entry>
    <title>The Renovation of The Blog</title>
    <url>/posts/About-The-Renovation-of-Blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>此博客已翻新完毕于2019.10.27,旧文档尚未就位,博客优化进程终止</p>
<a id="more"></a>
<hr>
<h1 id="Site-Updates"><a href="#Site-Updates" class="headerlink" title="Site Updates"></a>Site Updates</h1><h2 id="2020-1"><a href="#2020-1" class="headerlink" title="2020.1"></a>2020.1</h2><blockquote>
<p>Comment system has changed: ‘LiveRe’  -&gt; ‘Valine’</p>
<p>恢复部分旧文章</p>
</blockquote>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>我</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]SSOIER1726_矩阵</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0--%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>设第$i$行总共统一加了$Add1[i]$,第$j$列总共统一加了$Add2[j]$</p>
<p>则对于格子$[i][j]$,其值为$Add1[i]+Add2[j]$</p>
<p>于是对于每一组限制$(x,y,c)$,有$Add1[x]+Add2[y]=c$</p>
<p>差分约束的关系式是$x-y\leq or\geq c$怎么办,那么<strong>强行</strong>设$FAdd2[y]=-Add2[y]</p>
<p>于是对于每一组限制$(x,y,c)$,有$Add1[x]-FAdd2[y]=c$$</p>
<p>即$Add1[x]-FAdd2[y]\geq c\\FAdd2[y]-Add1[x]\geq -c$</p>
<p>DFS_SPFA判环即可</p>
<a id="more"></a>
<h1 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h1><p>又忘了$InStack[i]=0$QwQ<br>清空图时又忘了$SCount=0$QwQ<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2e3</span>+<span class="number">10</span>,MAXM=<span class="number">4e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM],STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],InStack[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(InStack[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	InStack[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=SDis[i]+Dis[x];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	InStack[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">memset</span>(SHd,<span class="number">0</span>,<span class="keyword">sizeof</span>(SHd));</span><br><span class="line">	<span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">	<span class="built_in">memset</span>(InStack,<span class="number">0</span>,<span class="keyword">sizeof</span>(InStack));</span><br><span class="line">	SCount=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;M,&amp;K) ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;c);</span><br><span class="line">		AddEdge(y+N,x,c);</span><br><span class="line">		AddEdge(x,y+N,-c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N+M;i++)<span class="keyword">if</span>(!Vis[i])</span><br><span class="line">	&#123;</span><br><span class="line">		Dis[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)_main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]SSOIER1725账本核算</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E8%B4%A6%E6%9C%AC%E6%A0%B8%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>差分约束</p>
<p>设前$i$月总收入为$S[i]$</p>
<p>则对于每一组($x,y,w$),有$S[y]-S[x-1]=w$</p>
<p>即关系式为</p>
<script type="math/tex; mode=display">
\color{red}S[y]-S[x-1]\geq w\\
S[y]-S[x-1]\leq w,即\color{red}s[x-1]-s[y]\geq -w</script><a id="more"></a>
<p>然而诡异的时说好的$N,M\leq100$然而却RE(IN SSOIER.com)</p>
<p>随手开到$1e3$而AC</p>
<p><del>当然也有可能是我太弱了</del></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000</span>+<span class="number">10</span>,MAXM=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM],STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> InStack[MAXN],Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(InStack[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	InStack[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i!=<span class="number">-1</span>;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;(ll)Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=(ll)Dis[x]+SDis[i];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	InStack[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(SHd,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SHd));</span><br><span class="line">		SCount=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">		<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">		<span class="built_in">memset</span>(Vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(Vis));</span><br><span class="line">		<span class="built_in">memset</span>(InStack,<span class="number">0</span>,<span class="keyword">sizeof</span>(InStack));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> X,Y,W;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;X,&amp;Y,&amp;W);</span><br><span class="line">			AddEdge(X<span class="number">-1</span>,Y,W),AddEdge(Y,X<span class="number">-1</span>,-W);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!InStack[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"false"</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"true"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)Work();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]P1993小k的农场</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%B0%8Fk%E7%9A%84%E5%86%9C%E5%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>差分约束判环,<a href="https://www.luogu.com.cn/problem/P1993" target="_blank" rel="noopener">洛谷地址</a></p>
<a id="more"></a>
<p>设$D[i]$表示第$i$个的农作物数量,则关系式</p>
<script type="math/tex; mode=display">
D[a]-D[b]\geq c\\
D[a]-D[b]\leq c,即D[b]-D[a]\geq -c\\
D[a]-D[b]=0,即D[a]-D[b]\geq 0\&\&D[b]-D[a]\geq 0</script><p>然BFS_SPFA炸了,于是DFS_SPFA<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>,MAXM=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM*<span class="number">2</span>],SDis[MAXM*<span class="number">2</span>],STo[MAXM*<span class="number">2</span>],SCount;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	SDis[SCount]=dis,STo[SCount]=to;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	VisCount[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(Vis[x])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[x];i;i=SNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=STo[i];</span><br><span class="line">		<span class="keyword">if</span>(Dis[v]&lt;Dis[x]+SDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Dis[v]=Dis[x]+SDis[i];</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(v))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Vis[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS_SPFA</span><span class="params">(<span class="keyword">int</span> Start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">	Q.push(Start);</span><br><span class="line">	Dis[Start]=<span class="number">0</span>;Vis[Start]=VisCount[Start]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=STo[i];</span><br><span class="line">			<span class="keyword">if</span>(Dis[v]&lt;Dis[u]+SDis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[v]=Dis[u]+SDis[i];</span><br><span class="line">				<span class="keyword">if</span>(Vis[v])<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(++VisCount[v]&gt;N+<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				Q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> order,a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;order,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">				AddEdge(b,a,c);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</span><br><span class="line">				AddEdge(a,b,-c);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">				AddEdge(a,b,<span class="number">0</span>),AddEdge(b,a,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0Xc0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]LOJ10090_布局</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>差分约束</p>
<p>条件:($P[i]$为第$i$头奶牛位置)</p>
<script type="math/tex; mode=display">
P[B]-P[A]\leq D\\
P[A]-P[B]\leq -D\\
P[i-1]-P[i]\leq 0\\</script><p>求最短路即可,若SPFA(1)时访问不到N,则输出-2;若负环则输出-1.<br><a id="more"></a><br><del>SPFA忘了Vis[u]=0这一句,结果调试了2个小时QwQ,于是乎又双叒叕证明了信息学学习准则草案的无比正确性</del><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> N,ML,MD;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e3</span>+<span class="number">10</span>,MAXM=<span class="number">3e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXM] ,STo[MAXM],SDis[MAXM],SCount;</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	SDis[SCount]=dis,STo[SCount]=to;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">	Q.push(start);</span><br><span class="line">	Dis[start]=<span class="number">0</span>,Vis[start]=VisCount[start]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=STo[i];</span><br><span class="line">			<span class="keyword">if</span>(Dis[v]&gt;SDis[i]+Dis[u])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[v]=SDis[i]+Dis[u];</span><br><span class="line">				<span class="keyword">if</span>(Vis[v])<span class="keyword">continue</span>;</span><br><span class="line">				VisCount[v]++;</span><br><span class="line">				<span class="keyword">if</span>(VisCount[v]&gt;N+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				Q.push(v),Vis[v]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ABS</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;ML,&amp;MD);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ML;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> A,B,D;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;D);</span><br><span class="line">		AddEdge(A,B,D);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MD;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> A,B,D;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;B,&amp;D);</span><br><span class="line">		AddEdge(B,A,-D);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)AddEdge(i,i<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">bool</span> Flag;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">if</span>(!SPFA(<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		Flag=VisCount[N]&gt;<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!SPFA(i))&#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(Flag)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dis[N]-Dis[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-2"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>```</p>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]LOJ10089_糖果</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E7%B3%96%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="模型构造"><a href="#模型构造" class="headerlink" title="模型构造"></a>模型构造</h1><p>差分约束</p>
<p>设$Dis[i]$为编号为$i$的小朋友的获得糖果数</p>
<p>则</p>
<script type="math/tex; mode=display">
X=1:\ D[A]-D[B]\geq 0,D[B]-D[A] \geq 0\\
X=2:\ D[A]-D[B]\geq 1\\
X=3:\ D[A]-D[B] \geq 0\\
X=4:\ D[A]-D[B]\geq1\\
X=5:\ D[B]-D[A]\geq 0</script><p>有正环则无解</p>
<p>由于图不一定联通,每次以一个未访问结点$start$为起点SPFA</p>
<p>因为每个小朋友至少要有1颗糖,$Dis[start]=1$</p>
<h1 id="模型修正1"><a href="#模型修正1" class="headerlink" title="模型修正1"></a>模型修正1</h1><p>答案可能超过int_MAX,开long long</p>
<h1 id="模型修正2"><a href="#模型修正2" class="headerlink" title="模型修正2"></a>模型修正2</h1><p>加入特判,当$(X==2 ||X==3)\&amp;\&amp;(A==B)$时非法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>,MAXK=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[MAXN],SNxt[MAXK*<span class="number">2</span>],STo[MAXK*<span class="number">2</span>],SDis[MAXK*<span class="number">2</span>],SCount;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SCount++;</span><br><span class="line">	SNxt[SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Vis[MAXN],VisCount[MAXN];</span><br><span class="line">ll Dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> Start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	Dis[Start]=<span class="number">1</span>;Vis[Start]=VisCount[Start]=<span class="number">1</span>;</span><br><span class="line">	Q.push(Start);</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(Dis[STo[i]]&lt;(ll)SDis[i]+Dis[u])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[STo[i]]=(ll)SDis[i]+Dis[u];</span><br><span class="line">				<span class="keyword">if</span>(Vis[STo[i]])<span class="keyword">continue</span>;</span><br><span class="line">				VisCount[STo[i]]++;</span><br><span class="line">				<span class="keyword">if</span>(VisCount[STo[i]]&gt;N+<span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				Q.push(STo[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> X,A,B;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;X,&amp;A,&amp;B);</span><br><span class="line">		<span class="keyword">switch</span>(X)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">				AddEdge(B,A,<span class="number">0</span>),AddEdge(A,B,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">				<span class="keyword">if</span>(A==B)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">"-1"</span>) ;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				AddEdge(A,B,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">				AddEdge(B,A,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">				<span class="keyword">if</span>(A==B)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">puts</span>(<span class="string">"-1"</span>) ;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				AddEdge(B,A,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">				AddEdge(A,B,<span class="number">0</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!VisCount[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!SPFA(i))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll Ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Ans+=Dis[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[做题笔记]LOJ10088_收纳员问题</title>
    <url>/posts/%E5%81%9A%E9%A2%98%E7%AC%94%E8%AE%B0-%E6%94%B6%E7%BA%B3%E5%91%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><del>本文思路依旧照搬一本通</del></p>
<p>差分约束<br><a id="more"></a><br>设$num[i]$为$i$时刻申请开始工作的人数,$x[i]$为$i$时刻实际开始工作的人数则$x[i]\leq num[i]$,$r[i]$表示$i$时刻需要有多少人工作</p>
<p>设</p>
<script type="math/tex; mode=display">
s[i]=\sum_{j=1}^ix[i]</script><p>则$i$时刻工作的总人数为$s[i]-s[i-8]$</p>
<p>故知</p>
<script type="math/tex; mode=display">
s[i]-s[i-8]\geq r[i](i\in[8,23])\\
Especially,s[23]+s[i]-s[i+16]\geq r[i](i\in [0,7])\\
0\leq s[i]-s[i-1]\leq num[i](i\in [1,23])\\
\color{green}{Especially,0\leq s[0]-s[23]\leq num[0]}\\</script><p>则</p>
<script type="math/tex; mode=display">
s[i]-s[i-8]\geq r[i](i\in[8,23])\\
\color{red}{s[i]-s[i+16]\geq r[i]-s[23](i\in [0,7])}\\
s[i]-s[i-1]\geq 0(i\in[0,23])\\
s[i-1]-s[i]\geq -num[i](i\in[0,23])\\
\color{green}{s[0]-s[23]\geq 0\\
s[23]-s[0]\geq -num[0]\\}</script><p><strong>20190817更正</strong></p>
<p><strong>绿色关系式是错误的,不应加入差分系统(因为$S[0]\not\geq S[23]$)</strong></p>
<p>红色关系式中,有三个未知量,则枚举$s[23]$可能的值,可行时输出最小值即可</p>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ10087_Intervals</title>
    <url>/posts/LOJ10087-Intervals/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>差分约束,其约束条件:<br>$S[b]-S[a-1]\geq c$</p>
<p>$S[i]-S[i-1]\geq 0$</p>
<p>$S[i]-S[i-1]\leq 1,即S[i-1]-S[i]\geq -1$</p>
<p>代码如下<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> SHd[(<span class="keyword">int</span>)<span class="number">5e4</span>+<span class="number">10</span>],SNxt[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],STo[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],SDis[(<span class="keyword">int</span>)<span class="number">1e5</span>+MAXN],SCount;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SNxt[++SCount]=SHd[from];</span><br><span class="line">	STo[SCount]=to,SDis[SCount]=dis;</span><br><span class="line">	SHd[from]=SCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> Minn,Maxx;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line"><span class="keyword">int</span> Dis[MAXN],Vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q.push(x);</span><br><span class="line">	Vis[x]=<span class="number">1</span>;</span><br><span class="line">	Dis[x]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=SHd[u];i!=<span class="number">-1</span>;i=SNxt[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(Dis[u]+SDis[i]&gt;Dis[STo[i]])</span><br><span class="line">			&#123;</span><br><span class="line">				Dis[STo[i]]=Dis[u]+SDis[i];</span><br><span class="line">				<span class="keyword">if</span>(!Vis[STo[i]])</span><br><span class="line">				&#123;</span><br><span class="line">					Vis[STo[i]]=<span class="number">1</span>;</span><br><span class="line">					Q.push(STo[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Vis[u]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memset</span>(SHd,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SHd)) ;</span><br><span class="line">	<span class="built_in">memset</span>(SNxt,<span class="number">-1</span>,<span class="keyword">sizeof</span>(SNxt));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123; </span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">		AddEdge(a,b+<span class="number">1</span>,c);</span><br><span class="line">		Minn=<span class="built_in">std</span>::min(Minn,a),Maxx=<span class="built_in">std</span>::max(Maxx,b+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(Dis,<span class="number">0xC0</span>,<span class="keyword">sizeof</span>(Dis));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=Minn;i&lt;=Maxx;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		AddEdge(i,i+<span class="number">1</span>,<span class="number">0</span>),AddEdge(i+<span class="number">1</span>,i,<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	SPFA(Minn);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Dis[Maxx]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>图论</category>
        <category>差分约束</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>P1273有线电视网之题解</title>
    <url>/posts/P1273%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E4%B9%8B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>原题地址[<a href="https://www.luogu.org/problem/P1273" target="_blank" rel="noopener">https://www.luogu.org/problem/P1273</a>].<br>本题看上去像是普通的树上背包，然而不同的是除了考虑的范围，费用还出现了收入，于是我们对不和谐的地方进行”整编”.<br><a id="more"></a></p>
<h4 id="模拟部分"><a href="#模拟部分" class="headerlink" title="模拟部分"></a>模拟部分</h4><p>有一些用户所支付的费用，大于公司修路所用的费用，则公司盈利；然而有一些用户支付的费用不足以用来修路，就需要公司挪用一部分盈利额来补贴。我们可以把问题转化为，用盈利额，最多能帮助多少修不起路的用户看上电视。</p>
<p>这个问题的关键是盈利额是固定的（不可能存在你给修得起路的用户修路你还亏钱的情况，只能是既得到了盈利额，路又修好了）它可以递归算出:</p>
<p>首先,我们假设用户都是预付款。用户把钱交给上一级转播站（父节点）。转播站花钱把路修好。剩下的钱都累积到转播站的私有财产了。这一级别的转播站在把钱交给上一级的转播站（父节点）。上一级的转播站把路修好剩下的钱又累积进私有财产……直到我交的钱不够修路了，就把钱留在自己手里，等待上面的补贴.就这样,盈利逐级收归中央,而有一些资产在传递的过程中出现残留.</p>
<p>这个过程的伪代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> TMoney[MAXN];<span class="comment">//TMoney[x]代表x的资产</span></span><br><span class="line">Dfs(x)</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">		TMoney[x]=Value[x];<span class="comment">//Value为用户支付金额</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span>(every E(x,v))</span><br><span class="line">		Dfs(v);</span><br><span class="line">		<span class="keyword">if</span>(TMoney[v]&gt;=E(x,v))</span><br><span class="line">			TMoney[x]+=TMoney[v]-E(x,v);</span><br></pre></td></tr></table></figure>
<h4 id="动规部分"><a href="#动规部分" class="headerlink" title="动规部分"></a>动规部分</h4><p>求出盈利额后，我们把修得起路的用户从动态规划的范围内彻底排除，然后就可以进行树上背包了.</p>
<p>设$f[x][s]$是以x结点为根的子树接受上级s元的补贴,最多能帮助多少修不起路的用户看上电视,</p>
<p>则$f[x][s]=\max\{f[v][j-E(x,v)]+f[x][s-j]\}(v\in son[i])$,这里的$E(i,v)$表示修好$(i,v)$这条边还需要补贴多少.</p>
<p>这个过程的伪代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Dp(x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(到了修不起路的叶子)</span><br><span class="line">        f[x][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(every E(x,v))</span><br><span class="line">	&#123;</span><br><span class="line">		Dp(v);</span><br><span class="line">		<span class="keyword">for</span>(非负整数s)<span class="comment">//范围见后文</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=s;j&gt;=E(x,v);j--)</span><br><span class="line">			&#123;</span><br><span class="line">				f[x][s]=<span class="built_in">std</span>::max(f[x][s],f[x][s-j]+f[v][j-E(x,v)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便，我们在前面模拟时:如果我的资产够修路，那$上一级的资产总额+=我的资产-E(i,v),E(i,v)=0$,如果不够,就把我的资产全部用来投入修路,即$E(i,v)-=我的资产,我的资产=0$</p>
<p>还有一些问题:伪代码中s的范围应该是多少?显然不会超过总盈利额，即根节点的资产(其他节点的资产修路的时候都花光了).并且，如果$CS[i]$元能修好整个子树的路，那么大于$CS[i]$的补贴也毫无意义.</p>
<p>于是,$0\leq s\leq \min(z,TMoney[1])$</p>
<p>最后统计答案时,不要忘了加上修得起路的用户数</p>
<p>所以在前面模拟的部分，我们还需要递归求出这些值</p>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN =<span class="number">3e3</span>+<span class="number">10</span>,MAXM=<span class="number">3e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> StarHd[MAXN],StarNxt[MAXN],StarTo[MAXN],StarDis[MAXN],StarCount;</span><br><span class="line"><span class="keyword">int</span> Value[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> Amazing;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x)\</span></span><br><span class="line">&#123;\</span><br><span class="line">	<span class="built_in">printf</span>(#x);\</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"=%d\n"</span>,x);\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	StarCount++;</span><br><span class="line">	StarNxt[StarCount]=StarHd[from];</span><br><span class="line">	StarTo[StarCount]=to;</span><br><span class="line">	StarDis[StarCount]=dis;</span><br><span class="line">	StarHd[from]=StarCount; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N-M;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">		<span class="keyword">while</span>(k--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a,b;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">			AddEdge(i,a,b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N-M+<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,Value+i);</span><br><span class="line">		Amazing+=Value[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> TMoney[MAXN],TSum[MAXN],TFlag[MAXN];<span class="comment">//T=Treasure</span></span><br><span class="line"><span class="keyword">int</span> CS[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">	&#123;</span><br><span class="line">		TMoney[x]=Value[x];</span><br><span class="line">		TSum[x]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//CS[x]=0;Value[x];</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=StarHd[x];i;i=StarNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=StarTo[i];</span><br><span class="line">		Dfs(v);</span><br><span class="line">		CS[x]+=StarDis[i]+CS[v];</span><br><span class="line">		<span class="keyword">if</span>(TMoney[v]&gt;=StarDis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			TMoney[x]+=TMoney[v]-StarDis[i];</span><br><span class="line">			TSum[x]+=TSum[v];</span><br><span class="line">			TFlag[v]=<span class="number">1</span>;</span><br><span class="line">			StarDis[i] =<span class="number">0</span>;</span><br><span class="line">			TMoney[v]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;StarDis[i]-=TMoney[v];TMoney[v]=<span class="number">0</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CS[x]-=(!TFlag[x])?TSum[x]:<span class="number">0</span>;</span><br><span class="line">	CS[x]=<span class="built_in">std</span>::min(CS[x],TMoney[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">if</span>(N-M&lt;x)</span><br><span class="line">	&#123;</span><br><span class="line">		f[x][<span class="number">0</span>]=!TFlag[x];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> s=TMoney[<span class="number">1</span>];s&gt;=<span class="number">0</span>;s--)f[x][s]+=(!TFlag[x])?TSum[x]:<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=StarHd[x];i;i=StarNxt[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=StarTo[i];</span><br><span class="line">		Dp(v);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> s=CS[x];s&gt;=<span class="number">0</span>;s--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=s;j&gt;=StarDis[i];j--)</span><br><span class="line">			&#123;</span><br><span class="line">				f[x][s]=<span class="built_in">std</span>::max(f[x][s],f[x][s-j]+f[v][j-StarDis[i]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Read();</span><br><span class="line">	Dfs(<span class="number">1</span>);</span><br><span class="line">	Dp(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=TMoney[<span class="number">1</span>];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Ans=<span class="built_in">std</span>::max(Ans,f[<span class="number">1</span>][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>做题笔记</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
